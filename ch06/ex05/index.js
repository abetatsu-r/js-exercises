// 継承元
let obj_proto = {
  origin: "文字",
  proto_str: "最弱",
  8: "数字順なので0のあと",
  0: "0は非負整数最小なので一番先に出るが、プロトタイプチェーン上なので後回し",
  1: "重複しているのでこの文字列が出力されない",
  enum: "同名の列挙不可のプロパティで上書きされ出力されない",
};

// objはプロトタイプを一つもつ
let obj = Object.create(obj_proto);

obj.unique = "文字列は数字のあと";
obj.origin = "上書きされかつ登録順2番目"; // プロトタイプと同名のプロパティ

obj[1] = "上書きされた1"; // プロトタイプと同名のプロパティ

// プロトタイプと同名でないプロパティ
obj[10] = "先に登録しても遅れて回る";
obj[5] = "数字は番号順なので";
obj[-3] = "負数は無視され、その他は登録順なのでuniqueのあと";

// 継承元が持つ列挙不可同名プロパティ
Object.defineProperty(obj, "enum", {
  value: "列挙不可",
  enumerable: false,
});

/**
 * 数字(objに存在) ⇒　文字列(登録順) ⇒ 継承元で同じ順序
 * ただし列挙不可は出てこない
 */
for (let p in obj) {
  console.log(p + ":", obj[p]);
  /**
     *  1: 上書きされた1
        5: 数字は番号順なので
        10: 先に登録しても遅れて回る
        unique: 文字列は数字のあと
        origin: 上書きされかつ登録順2番目
        -3: 負数は無視され、その他は登録順なのでuniqueのあと
        0: 0は非負整数最小なので一番先に出るが、プロトタイプチェーン上なので後回し
        8: 数字順なので0のあと
        proto_str: 最弱
     */
}
